!function(n){var e={};function r(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:t})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s=1)}({"./src/online-service/js/player_injection.js":function(module,exports){eval("const extensionId = whale.runtime.id;\nconst rawCssText = `\n.wmp-wrapper {\n    display: block;\n    position: absolute;\n    right: 0px;\n    bottom: 73px;\n    height: 46px;\n    width: 20px;\n    z-index: 10000;\n    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);\n    overflow:hidden;\n    border: 1px solid #333333;\n    background-color: #4b4b4b;\n    border-radius: 5px 0 0 5px;\n    transition-property: all;\n    transition-duration: 250ms;\n    transition-timing-function: ease;\n}\n\n.wmp-btn {\n    display: inline-block;\n    width: 146px;\n    height: 20px;\n    vertical-align: middle;\n    background-color:transparent;\n    background-repeat: no-repeat;\n    background-position: center;\n    line-height: 18px;\n    box-sizing: border-box;\n    border: none;\n    border-right: 1px solid #333;\n    font-size:11px;\n    color:#fff;\n    cursor: pointer;\n    outline: none;\n    opacity: 0.85;\n}\n\n.wmp-btn:hover {\n    opacity: 1.0;\n}\n\n.wmp-btn.menu {\n    position: relative;\n    height: 46px;\n    width: 24px;\n    background-color: #414141;\n    border-right: 1px solid #333;\n    margin: -1px 0 0 -1px;\n}\n\n.wmp-btn.menu .wmp-arrow {\n    position:absolute;\n    top:50%;\n    left:50%;\n    margin: -6px 0 0 -3px;\n    width: 7px;\n    height: 12px;\n    background-size: 7px 12px;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-image:url('chrome-extension://${extensionId}/online-service/img/menu_arrow.png');\n}\n\n.wmp-wrapper.sidebar:hover {\n    width: 321px;\n}\n\n.wmp-wrapper.popup:hover {\n    width: 171px;\n}\n\n.wmp-btn.toggle,\n.wmp-btn.home {\n    background-position: 13px 1px;\n    padding-left: 30px;\n}\n\n.popup .wmp-btn.toggle {\n    background-image:url('chrome-extension://${extensionId}/online-service/img/mplayer_sidebar.svg');\n    background-size: 18px 18px;\n    border-right: none;\n}\n\n.popup .wmp-btn.toggle:hover {\n    background-image:url('chrome-extension://${extensionId}/online-service/img/mplayer_sidebar(hover).svg');\n    color: #00dc9b;\n}\n\n.sidebar .wmp-btn.toggle {\n    background-image:url('chrome-extension://${extensionId}/online-service/img/mplayer_popup.svg');\n    background-size: 18px 18px;\n}\n\n.sidebar .wmp-btn.toggle:hover {\n    background-image:url('chrome-extension://${extensionId}/online-service/img/mplayer_popup(hover).svg');\n    color: #00dc9b;\n}\n\n.sidebar .wmp-btn.home {\n    background-image:url('chrome-extension://${extensionId}/online-service/img/mplayer_close.svg');\n    background-size: 18px 18px;\n    border-right: none;\n}\n\n.sidebar .wmp-btn.home:hover {\n    background-image:url('chrome-extension://${extensionId}/online-service/img/mplayer_close(hover).svg');\n    color: #00dc9b;\n}\n\n.sidebar .wmp-btn.service {\n    width: 85px;\n}\n\n.wmp-wrapper.naver {\n    bottom: 61px;\n}\n\n.wmp-wrapper.bugs {\n    bottom: 69px;\n}\n\n.wmp-wrapper.mnet {\n    bottom: 43px;\n}\n\n.wmp-wrapper.genie {\n    bottom: 125px;\n}\n`;\nconst cssInjection = `\n/* service dependent style overrides for sidebar player mode */\n/* http://www.genie.co.kr/player/fPlayer */\n._whale._sidebar .music-list .contents,\n._whale._sidebar .music-player .gnb-player {\n    min-width: 390px !important;\n}\n\n._whale._sidebar .fp-player {\n    width: calc(100% - 33px) !important;\n}\n\n/* https://playerui.music.naver.com */\n._whale._sidebar .player_links .list {\n    display: none !important;\n}\n\n._whale._sidebar .player_songs {\n    display: block !important;\n}\n\n._whale._sidebar .player_footer {\n    display: block !important;\n}\n\n/* http://www.mnet.com/player/aod/ */\n._whale._sidebar .playBtnArea {\n    min-width: 396px;\n    z-index: 10000;\n}\n`;\n\n\n(function () {\n    `use strict`;\n\n    let serviceInfo = null;\n    let playerMode = null;\n    const DOM = {};\n\n    function init() {\n        getServiceInfo().then(result => {\n            serviceInfo = result;\n            handleModeChange();\n            preventLinkDragNDrop();\n        });\n        document.body.classList.add(`_whale`);\n    }\n\n    function handleModeChange() {\n        getPlayerMode().then(result => {\n            playerMode = result;\n            updateButtons();\n            refineElements();\n        });\n    }\n\n    function updateButtons() {\n        DOM.custom = DOM.custom\n            || document.createElement(`change-player-mode`);\n\n        DOM.shadowRoot = DOM.shadowRoot\n            || DOM.custom.attachShadow({ mode: `closed` });\n\n        DOM.shadowRoot.innerHTML = ``;\n\n        DOM.btnWrapper = document.createElement(`div`);\n        DOM.btnWrapper.classList.add(`wmp-wrapper`);\n        DOM.btnWrapper.classList.add(serviceInfo.id);\n\n        const menuBtn = document.createElement(`div`);\n        menuBtn.className = `wmp-btn menu`;\n        DOM.btnWrapper.appendChild(menuBtn);\n        menuBtn.addEventListener(`click`, onClickArrowButton, false);\n\n        const menuBtnArrow = document.createElement(`div`);\n        menuBtnArrow.className = `wmp-arrow`;\n        menuBtn.appendChild(menuBtnArrow);\n\n        const toggleBtn = document.createElement(`button`);\n        toggleBtn.className = `wmp-btn toggle`;\n        toggleBtn.addEventListener(`click`, onClickToggleMode, false);\n\n        if (playerMode.mode === `sidebar`) {\n            DOM.btnWrapper.classList.add(`sidebar`);\n            toggleBtn.title = whale.i18n.getMessage(`INJECTION_BTN_TO_POPUP`);\n            toggleBtn.innerHTML = whale.i18n.getMessage(`INJECTION_BTN_TO_POPUP`);\n\n            const homeBtn = document.createElement(`button`);\n            homeBtn.className = `wmp-btn home`;\n            homeBtn.title = whale.i18n.getMessage(`INJECTION_BTN_TO_HOME`);\n            homeBtn.innerHTML = whale.i18n.getMessage(`INJECTION_BTN_TO_HOME`);\n            homeBtn.addEventListener(`click`, onClickCloseSidebarPlayer, false);\n\n            DOM.btnWrapper.appendChild(toggleBtn);\n            DOM.btnWrapper.appendChild(homeBtn);\n        } else {\n            DOM.btnWrapper.classList.add(`popup`);\n            toggleBtn.title = whale.i18n.getMessage(`INJECTION_BTN_TO_SIDEBAR`);\n            toggleBtn.innerHTML = whale.i18n.getMessage(`INJECTION_BTN_TO_SIDEBAR`);\n            DOM.btnWrapper.appendChild(toggleBtn);\n        }\n\n        const style = document.createElement(`style`);\n        style.innerHTML = rawCssText;\n        DOM.shadowRoot.appendChild(style);\n\n        DOM.shadowRoot.appendChild(DOM.btnWrapper);\n        document.documentElement.appendChild(DOM.custom);\n    }\n\n    function refineElements() {\n        if (!playerMode) {\n            return;\n        }\n\n        // toggle classname for css style override\n        if (playerMode.mode === `popup`) {\n            document.body.classList.remove(`_sidebar`);\n        } else {\n            document.body.classList.add(`_sidebar`);\n        }\n\n        // css injection for player side refinement\n        if (!document.querySelector(`#_mp_css_injctn`)) {\n            const style = document.createElement(`style`);\n            style.id = `_mp_css_injctn`;\n            style.innerHTML = cssInjection;\n            document.head.appendChild(style);\n        }\n\n        // some styles must be defined dynamically by javascript\n        if (serviceInfo.id === `mnet`) {\n            const override = (playerMode.mode === `sidebar`);\n            const leftOver = Math.max(window.innerHeight - 270, 373);\n            const resizeTargets = {\n                parent: `#playerOption`,\n                child: [\n                    `.mplayList`,\n                    `.myPlaylist`\n                ]\n            };\n\n            const wrap = document.querySelector(resizeTargets.parent);\n            if (override) {\n                wrap && wrap.style.setProperty(`height`, `${leftOver}px`, `important`);\n            } else {\n                wrap && wrap.style.removeProperty(`height`);\n            }\n\n            resizeTargets.child.forEach(selector => {\n                const nodes = wrap.querySelectorAll(selector);\n                nodes && nodes.forEach(node => {\n                    if (override) {\n                        node.style.setProperty(`overflow`, `hidden`);\n                        node.style.setProperty(`height`, `${leftOver - 93}px`, `important`);\n                        node.style.setProperty(`max-height`, `${leftOver - 93}px`, `important`);\n                    } else {\n                        node.style.removeProperty(`overflow`);\n                        node.style.removeProperty(`height`);\n                        node.style.removeProperty(`max-height`);\n                    }\n                });\n            });\n        }\n    }\n\n    function preventLinkDragNDrop() {\n        window.addEventListener(`dragover`, e => {\n            e = e || event;\n            e.preventDefault();\n            e.dataTransfer.effectAllowed = `none`;\n            e.dataTransfer.dropEffect = `none`;\n\n        }, false);\n\n        window.addEventListener(`drop`, e => {\n            e = e || event;\n            e.preventDefault();\n            e.dataTransfer.effectAllowed = `none`;\n            e.dataTransfer.dropEffect = `none`;\n        }, false);\n\n        if (serviceInfo.id === `naver`) {\n            // [WHALE-2258] prevent dragging anchor with href=# which can open player page in new window or tab\n            window.addEventListener(`dragstart`, e => {\n                e = e || event;\n                if (e.target.tagName === `A` && e.target.href.endsWith(`#`) && !e.target.closest(`ul.songs_list`)) {\n                    e.preventDefault();\n                    e.dataTransfer.effectAllowed = `none`;\n                    e.dataTransfer.dropEffect = `none`;\n                }\n            }, false);\n        }\n    }\n\n    function getServiceInfo() {\n        return sendMessageToBackground({\n            action: `getServiceInfo`,\n            param: {\n                url: location.href\n            }\n        });\n    }\n\n    function getPlayerMode() {\n        return sendMessageToBackground({\n            action: `getPlayerMode`\n        });\n    }\n\n    function onClickToggleMode(e) {\n        e.stopPropagation();\n        if (playerMode.mode === `sidebar`) {\n            sendMessageToBackground({\n                action: `undockPlayerFromSidebar`\n            });\n        } else {\n            sendMessageToBackground({\n                action: `dockPlayerToSidebar`\n            });\n        }\n    }\n\n    function onClickArrowButton(e) {\n        e.stopPropagation();\n    }\n\n    function onClickCloseSidebarPlayer() {\n        sendMessageToBackground({\n            action: `undockPlayerFromSidebar`,\n            closePlayer: true\n        });\n    }\n\n    function sendMessageToBackground(param) {\n        param = Object.assign(param, {\n            url: location.href\n        });\n        return wl.RuntimeMessage.send(`musicplayer`, param);\n    }\n\n    window.addEventListener(`resize`, refineElements, false);\n    window.addEventListener(`load`, init, false);\n    wl.Storage.listen(`mode`, handleModeChange);\n})();\n\n\n//# sourceURL=webpack:///./src/online-service/js/player_injection.js?")},"./src/wl.RuntimeMessage.js":function(module,exports){eval("/**\n * Copyright 2016 NAVER Corp. All Rights reserved.\n * All rights, including but not limited to, copyrights,\n * and intellectual property rights of this source code are owned by NAVER Corp.\n *\n * You may not use, reproduce, modify, or distribute this source code\n * without prior written permission from NAVER Corp.\n *\n * @author Kim Jihan <kim.jihan@navercorp.com>\n */\nwindow.wl = window.wl || {};\nwindow.wl.RuntimeMessage = window.wl.RuntimeMessage || (function () {\n    `use strict`;\n\n    const listeners = {};\n    whale.runtime.onMessage.addListener(onMessageReceived);\n\n    function onMessageReceived(message, sender, sendResponse) {\n        if (message.namespace && Array.isArray(listeners[message.namespace])) {\n            listeners[message.namespace].forEach(listener => {\n                listener(message.message, sender, sendResponse);\n            });\n        }\n\n        return true;\n    }\n\n    function addListener(namespace, listener) {\n        listeners[namespace] = listeners[namespace] || [];\n        listeners[namespace].push(listener);\n    }\n\n    function sendMessage(namespace, message, tabId, frameId) {\n        return new Promise(resolve => {\n            if (typeof tabId !== `undefined` && tabId > -1) {\n                whale.tabs.sendMessage(tabId, {\n                    namespace: namespace,\n                    message: message\n                },\n                (typeof frameId !== `undefined` && frameId > -1) ? { frameId: frameId } : {},\n                response => {\n                    resolve(response);\n                });\n            } else {\n                whale.runtime.sendMessage({\n                    namespace: namespace,\n                    message: message\n                }, response => {\n                    resolve(response);\n                });\n            }\n        });\n    }\n\n    function broadcast(namespace, message) {\n        // broadcasting available only in background\n        if (!whale.tabs) {\n            return new Promise((resolve, reject) => {\n                reject();\n            });\n        }\n\n        const promised = [];\n        whale.tabs.query({}, tabs => {\n            tabs.forEach(tab => {\n                promised.push(new Promise(resolve => {\n                    whale.tabs.sendMessage(tab.id, {\n                        namespace: namespace,\n                        message: message\n                    }, response => {\n                        resolve(response);\n                    });\n                }));\n            });\n        });\n\n        return Promise.all(promised);\n    }\n\n    return {\n        broadcast: broadcast,\n        listen: addListener,\n        send: sendMessage\n    };\n})();\n\n\n//# sourceURL=webpack:///./src/wl.RuntimeMessage.js?")},"./src/wl.Storage.js":function(module,exports){eval("/**\n * Copyright 2016 NAVER Corp. All Rights reserved.\n * All rights, including but not limited to, copyrights,\n * and intellectual property rights of this source code are owned by NAVER Corp.\n *\n * You may not use, reproduce, modify, or distribute this source code\n * without prior written permission from NAVER Corp.\n *\n */\nwindow.wl = window.wl || {};\nwindow.wl.Storage = window.wl.Storage || (function () {\n    `use strict`;\n\n    const prefix = whale.extension.inIncognitoContext ? `incognito_` : `normal_`;\n    const listeners = {};\n\n    function get(key) {\n        return new Promise(resolve => {\n            key = prefix + key;\n            whale.storage.local.get(key, result => {\n                const clone = {};\n                for (const key in result) {\n                    clone[key.split(prefix)[1]] = result[key];\n                }\n                resolve(clone);\n            });\n        });\n    }\n\n    function set(param) {\n        const clone = {};\n        return new Promise(resolve => {\n            for (const key in param) {\n                clone[prefix + key] = param[key];\n            }\n            whale.storage.local.set(clone, resolve);\n        });\n    }\n\n    function listen(param, callback) {\n        if (typeof param === `string`) {\n            listeners[prefix + param] = callback;\n        } else {\n            param.forEach(key => {\n                listeners[prefix + key] = callback;\n            });\n        }\n    }\n\n    function onStorageChange(result) {\n        for (const key in result) {\n            if (listeners[key]) {\n                listeners[key](result[key].newValue);\n            }\n        }\n    }\n\n    whale.storage.onChanged.addListener(onStorageChange);\n\n    return {\n        get, set, listen\n    };\n})();\n\n\n//# sourceURL=webpack:///./src/wl.Storage.js?")},1:function(module,exports,__webpack_require__){eval('__webpack_require__(/*! ./src/wl.Storage.js */"./src/wl.Storage.js");\n__webpack_require__(/*! ./src/wl.RuntimeMessage.js */"./src/wl.RuntimeMessage.js");\nmodule.exports = __webpack_require__(/*! ./src/online-service/js/player_injection.js */"./src/online-service/js/player_injection.js");\n\n\n//# sourceURL=webpack:///multi_./src/wl.Storage.js_./src/wl.RuntimeMessage.js_./src/online-service/js/player_injection.js?')}});